function TEST() {
  // ⭐️変数の定義
  const ss = SpreadsheetApp.getActiveSpreadsheet();  //スプレッドシートアプリを呼び出して、現在のスプレッドシートファイルを取得
  const staffRegister = ss.getSheetByName("スタッフ名簿"); //スタッフ名簿シートを取得
  const dayOffSheet = ss.getSheetByName("希望休入力カレンダー"); //現場が入力するシートを取得
  const shiftYear = dayOffSheet.getRange(1, 1).getValue(); //希望休カレンダーにある　年　を取得
  const shiftMonth = dayOffSheet.getRange(1, 6).getValue();//希望休カレンダーにある　月　を取得
  const eoMonth = new Date(shiftYear, shiftMonth, 0).getDate();     //希望休カレンダーにある　月末日　を取得
  const testSheet = ss.getSheetByName("テスト"); //ただのテスト。ちゃんとsetValuesできるか見るため。
  // testSheet.getRange(1,1,staffsData.length,staffsData[0].length).setValues(staffsData);テストシートで使えるよ
  // スタッフ名簿のレコードを取得。配列を操作できるようletで宣言。
  const staffsData = staffRegister.getRange(2, 1, staffRegister.getLastRow() - 1, staffRegister.getLastColumn()).getValues();
  const staffColRow = staffRegister.getRange(1, 1, 1, staffRegister.getLastColumn()).getValues();//スタッフ名簿のスタッフを取得
  const staffCol = staffColRow[0];//上段のを一次元配列にする
  const nurses = staffsData.filter(row => row[8] == "看護師");//看護師名簿
  const others = staffsData.filter(row => row[8] != "看護師");//看護師以外名簿
  const number0fDayNurses = 2; //日勤　看護師　必要人数
  const naumberOfDaystaffs = 5 //日勤　必要人数
  const number0fNightNurses = 1; //夜勤　看護師　必要人数
  const naumberOfNightStaffs = 2 //夜勤　　必要人数

  /*
  オブジェクト形式でオブジェクト＝個人　プロパティ＝当月の勤務状態（日勤or夜勤or夜勤明け（明け）,休日）にして
  先に①希望休　　ループ内（②夜勤者　③日勤者)で月間勤務を作成
  {夜勤:[name,job],日勤[name,job]}を作成してループさせる　あとで最低職種人数をチャックするため
  
  */

  const shiftMonthByStaffs = {};//1人ずつ一月分の配列を連想配列にする
  staffsData.forEach(function ([_, name]) { //スタッフ名簿の2つ目のインデックスの値を
    shiftMonthByStaffs[name] = Array(eoMonth).fill(null); //プロパティにして、それぞれ、月の日数分値を用意してnullを入れる
  }); //log {清水咲良:[null, null, null,...],鈴木翔太:[null, null, null,...],...} 

  //希望休を入れる
  const reqDayOff = {};
  //希望休シートにあるスタッフを一次元配列に
  const dayOffStaffs = dayOffSheet.getRange(6, 1, dayOffSheet.getLastRow() - 5, 1).getValues().flat();
  const dayOffDatas = dayOffSheet.getRange(6, 3, dayOffStaffs.length, eoMonth).getValues();//希望休の二次元配列
  for (i = 0; i < dayOffStaffs.length; i++) {
    reqDayOff[dayOffStaffs[i]] = dayOffDatas[i]; //名前をプロパティ、日にちを値とする連想配列に
  };

  for (name in reqDayOff) {
    //for...in文で二つの連想配列の名前が合致する時の操作をできる様にする
    const daysOff = reqDayOff[name];
    const shiftMonthByStaffsArr = shiftMonthByStaffs[name];
    //希望休カレンダーに何か入力されていたら、休日扱いにする
    for (let i = 0; i < daysOff.length; i++) {
      if (daysOff[i] != "") shiftMonthByStaffsArr[i] = "休";
    };
  };// shiftMonthByStaffs = {清水咲良:[null, "休", null,...],鈴木翔太:["休", null, null,...],...} 
  // Logger.log(shiftMonthByStaffs)

  //職種をランダムして、分けて、並べる‼️作業中‼️
  //＜夜勤＞
  //その日休みか
  //日勤専従か
  //前日は夜勤か、前々日は夜勤か

  //＜日勤＞夜勤の同様の作業
  for (let day = 0; day < eoMonth; i++) {//日毎に
    const dayShift = { "日勤": [], "夜勤": [] };//

    const shuffledNurses = nurses.sort(() => Math.random() - 0.5);//看護師全員をシャッフル
    //日勤に必要なスタッフをシャッフルして看護師、それ以外で並べる
    const requiredDayNurses = shuffledNurses.slice(0, number0fDayNurses + 1); //看護師が必要な分
    const leftOverDaystaffs = [...others, ...shuffledNurses].slice(number0fDayNurses + 1).sort(() => Math.random() - 0.5);
    const shuffledDayStaffs = [...requiredDayNurses, ...leftOverDaystaffs];
    // Logger.log(shuffledDayStaffs)
    //夜勤も同様
    const requiredNightNurses = shuffledNurses.slice(0, number0fDayNurses + 1); //看護師が必要な分
    const leftOverNightstaffs = [...others, ...shuffledNurses].slice(number0fDayNurses + 1).sort(() => Math.random() - 0.5);
    const shuffledNightStaffs = [...requiredNightNurses, ...leftOverNightstaffs];

    for (let [, name, , , , , , , job, type] of shuffledDayStaffs) {
      if (shiftMonthByStaffs[name][day]) continue;
      if (type == "日勤専従") continue;
      const prevDay1 = day > 0 ? shiftMonthByStaffs[name][day - 1] : null;
      const prevDay2 = day > 1 ? shiftMonthByStaffs[name][day - 2] : null;
      if ([prevDay1, prevDay2].includes("夜勤")) continue;

      const thisWeek = shiftMonthByStaffs[name].slice(Math.max(0, day - 6), day);
      const workedThisWeek = thisWeek.filter(work => work == "日勤" || work == "夜勤").length;
      const workedThisMonth = shiftMonthByStaffs.filter(work => work == "日勤" || work == "夜勤").length;
      if (workedThisWeek > 6 || workedThisMonth >= eoMonth - 9) continue;

      shiftMonthByStaffs[name][day] = "夜勤";
      if (day + 1 < eoMonth) shiftMonthByStaffs[name][day + 1] = "明け";
      if (day + 2 < eoMonth) shiftMonthByStaffs[name][day + 2] = "休";
    };
    Logger.log(shiftMonthByStaffs);






  };
